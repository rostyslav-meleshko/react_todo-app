{"version":3,"sources":["components/NewTodo/NewTodo.js","constants.js","components/FilterTodos/FilterTodos.js","components/Todo/Todo.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["NewTodo","setTodos","useState","title","setTitle","counter","setCounter","onSubmit","event","preventDefault","trim","todos","id","completed","prevCounter","handleSubmit","type","className","placeholder","value","onChange","target","FILTER_LINKS","FilterTodos","activeTodos","useMemo","filter","todo","length","pathname","useLocation","map","link","key","to","onClick","prevTodos","defaultProps","Todo","handleTodo","tempTitle","setTempTitle","isTodoEditing","setisTodoEditing","handleBlur","cn","editing","checked","onDoubleClick","handleDoubleClick","autoFocus","onBlur","onKeyDown","todoId","handleKeyDown","TodoList","isAllTodosStatusSame","every","handleType","status","prevtodos","currentTodo","changeAllTodosStatus","useCallback","htmlFor","App","filteredTodos","tempTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aef81107.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = ({ setTodos }) => {\n  const [title, setTitle] = useState('');\n  const [counter, setCounter] = useState(1);\n\n  const createTodo = () => ({\n    id: counter,\n    title: title.trim(),\n    completed: false,\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!title.trim()) {\n      return;\n    }\n\n    setTodos(todos => [...todos, createTodo()]);\n    setCounter(prevCounter => prevCounter + 1);\n    setTitle('');\n  };\n\n  return (\n    <>\n      <form onSubmit={(event) => {\n        handleSubmit(event);\n      }}\n      >\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={({ target }) => setTitle(target.value)}\n        />\n      </form>\n    </>\n  );\n};\n\nNewTodo.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n};\n","export const ALL = 'all';\nexport const ACTIVE = 'active';\nexport const COMPLETED = 'completed';\nexport const FILTER_LINKS = [ALL, ACTIVE, COMPLETED];\n\nexport const EDIT_TODO = 'edit';\nexport const DELETE_TODO = 'delete';\nexport const COMPLETE_TODO = 'complete';\n","/* eslint-disable no-nested-ternary */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { ALL, FILTER_LINKS } from '../../constants';\n\nexport const FilterTodos = ({ todos, setTodos }) => {\n  const activeTodos = useMemo(() => (\n    todos.filter(todo => !todo.completed).length), [todos]);\n  const location = useLocation();\n  const { pathname } = location;\n\n  const deleteCompletedTodos = () => {\n    setTodos(prevTodos => prevTodos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <>\n      <span className=\"todo-count\">\n        {`${activeTodos} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        {FILTER_LINKS.map(link => (\n          <li key={link} className=\"firstLetter\">\n            <Link\n              to={link === ALL ? '/' : `/${link}`}\n              className={link === ALL && pathname === '/'\n                ? 'selected'\n                : pathname === `/${link}`\n                  ? 'selected'\n                  : null}\n            >\n              <span className=\"firstLetter\">{link}</span>\n            </Link>\n          </li>\n        ))}\n\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={() => deleteCompletedTodos()}\n      >\n        Clear completed\n      </button>\n    </>\n  );\n};\n\nFilterTodos.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n  setTodos: PropTypes.func.isRequired,\n};\n\nFilterTodos.defaultProps = {\n  todos: [],\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { EDIT_TODO, DELETE_TODO, COMPLETE_TODO } from '../../constants';\n\nexport const Todo = ({ todo, handleTodo }) => {\n  const [tempTitle, setTempTitle] = useState('');\n  const [isTodoEditing, setisTodoEditing] = useState(false);\n\n  const handleDoubleClick = (event, title) => {\n    event.preventDefault();\n    setisTodoEditing(!isTodoEditing);\n    setTempTitle(title);\n  };\n\n  const handleEditing = ({ target }) => {\n    setTempTitle(target.value);\n  };\n\n  const handleBlur = (id) => {\n    handleTodo(EDIT_TODO, id, tempTitle, null);\n    setisTodoEditing(false);\n  };\n\n  const handleKeyDown = (event, todoId) => {\n    switch (event.key) {\n      case 'Enter':\n        handleBlur(todoId);\n        break;\n      case 'Escape':\n        setisTodoEditing(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <li\n        key={todo.id}\n        className={cn({\n          completed: todo.completed,\n          editing: isTodoEditing,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todo.completed}\n            onChange={() => (\n              handleTodo(COMPLETE_TODO, todo.id, null, !todo.completed)\n            )}\n          />\n          <label onDoubleClick={(event) => {\n            handleDoubleClick(event, todo.title);\n          }}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => handleTodo(DELETE_TODO, todo.id, null, null)}\n          />\n        </div>\n        {isTodoEditing\n            && (\n            <input\n              autoFocus\n              type=\"text\"\n              className=\"edit\"\n              value={tempTitle}\n              onChange={handleEditing}\n              onBlur={() => handleBlur(todo.id)}\n              onKeyDown={event => handleKeyDown(event, todo.id)}\n            />\n            )}\n      </li>\n    </>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n  handleTodo: PropTypes.func.isRequired,\n};\n\nTodo.defaultProps = {\n  todo: {},\n};\n","import React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\nimport { EDIT_TODO, DELETE_TODO, COMPLETE_TODO } from '../../constants';\n\nexport const TodoList = ({ todos, setTodos }) => {\n  const isAllTodosStatusSame = useMemo(() => (\n    todos.every(todo => todo.completed === true)\n  ), [todos]);\n\n  const handleTodo = (handleType, id, title, status) => {\n    switch (handleType) {\n      case DELETE_TODO:\n        setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n        break;\n\n      case EDIT_TODO:\n        setTodos(prevTodos => prevTodos.map((todo) => {\n          if (todo.id !== id) {\n            return todo;\n          }\n\n          if (title.trim().length === 0) {\n            setTodos(prevtodos => (\n              prevtodos.filter(currentTodo => currentTodo.id !== id)\n            ));\n          }\n\n          return { ...todo, title };\n        }));\n        break;\n\n      case COMPLETE_TODO:\n        setTodos(prevTodos => prevTodos.map((todo) => {\n          if (todo.id !== id) {\n            return todo;\n          }\n\n          return { ...todo, completed: status };\n        }));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const changeAllTodosStatus = useCallback((status) => {\n    setTodos(prevTodos => (\n      prevTodos.map(todo => ({ ...todo, completed: status }))\n    ));\n  }, [setTodos]);\n\n  return (\n    <>\n      {!!todos.length\n      && (\n      <>\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={isAllTodosStatusSame}\n          onChange={() => changeAllTodosStatus(!isAllTodosStatusSame)}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      </>\n      )}\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            handleTodo={handleTodo}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n  setTodos: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React, { useState, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { NewTodo } from './components/NewTodo';\nimport { FilterTodos } from './components/FilterTodos';\nimport { TodoList } from './components/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const location = useLocation();\n  const { pathname } = location;\n\n  const filteredTodos = useMemo(() => {\n    let tempTodos = [...todos];\n\n    switch (pathname) {\n      case '/active':\n        tempTodos = todos.filter(todo => !todo.completed);\n        break;\n      case '/completed':\n        tempTodos = todos.filter(todo => todo.completed);\n        break;\n      default:\n        tempTodos = [...todos];\n        break;\n    }\n\n    return tempTodos;\n  }, [pathname, todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTodo setTodos={setTodos} />\n      </header>\n\n      <section className=\"main\">\n        <TodoList todos={filteredTodos} setTodos={setTodos} />\n      </section>\n\n      {!!todos.length && (\n      <footer className=\"footer\">\n        <FilterTodos todos={todos} setTodos={setTodos} />\n      </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}