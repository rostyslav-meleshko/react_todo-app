{"version":3,"sources":["components/NewTodo/NewTodo.js","constants.js","components/FilterTodos/FilterTodos.js","components/Todo/Todo.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["NewTodo","addTodo","useState","title","setTitle","createTodo","useCallback","id","Date","trim","completed","newTodo","useMemo","onSubmit","event","preventDefault","handleSubmit","type","className","placeholder","value","onChange","target","FILTER_LINKS","FilterTodos","todos","setTodos","activeTodosCount","filter","todo","length","isCompletedTodoPresents","some","pathname","useLocation","map","link","key","to","cn","selected","onClick","prevTodos","Todo","completeTodo","editTodo","deleteTodo","tempTitle","setTempTitle","isTodoEditing","setisTodoEditing","handleBlur","editing","checked","onDoubleClick","handleDoubleClick","autoFocus","onBlur","onKeyDown","todoId","handleKeyDown","defaultProps","TodoList","isAllTodosCompleted","every","status","changeAllTodosStatus","htmlFor","App","filteredTodos","tempTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93469414.chunk.js","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = ({ addTodo }) => {\n  const [title, setTitle] = useState('');\n\n  const createTodo = useCallback(() => ({\n    id: +new Date(),\n    title: title.trim(),\n    completed: false,\n  }\n  ), [title]);\n\n  const newTodo = useMemo(() => createTodo(), [createTodo]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!title.trim()) {\n      return;\n    }\n\n    addTodo(newTodo);\n    setTitle('');\n  };\n\n  return (\n    <>\n      <form onSubmit={(event) => {\n        handleSubmit(event);\n      }}\n      >\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={({ target }) => setTitle(target.value)}\n        />\n      </form>\n    </>\n  );\n};\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","export const ALL = 'all';\nexport const ACTIVE = 'active';\nexport const COMPLETED = 'completed';\nexport const FILTER_LINKS = [ALL, ACTIVE, COMPLETED];\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport cn from 'classnames';\nimport { ALL, FILTER_LINKS } from '../../constants';\n\nexport const FilterTodos = ({ todos = [], setTodos }) => {\n  const activeTodosCount = useMemo(() => (\n    todos.filter(todo => !todo.completed).length), [todos]);\n  const isCompletedTodoPresents = useMemo(() => (\n    todos.some(todo => todo.completed)), [todos]);\n\n  const location = useLocation();\n  const { pathname } = location;\n\n  const deleteCompletedTodos = () => {\n    setTodos(prevTodos => prevTodos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <>\n      <span className=\"todo-count\">\n        {`${activeTodosCount} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        {FILTER_LINKS.map(link => (\n          <li key={link} className=\"firstLetter\">\n            <Link\n              to={link === ALL ? '/' : `/${link}`}\n              className={cn({\n                selected: (link === ALL && pathname === '/')\n                || pathname === `/${link}`,\n              })}\n            >\n              <span className=\"firstLetter\">{link}</span>\n            </Link>\n          </li>\n        ))}\n      </ul>\n\n      {isCompletedTodoPresents && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={deleteCompletedTodos}\n      >\n        Clear completed\n      </button>\n      )}\n    </>\n  );\n};\n\nFilterTodos.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const Todo = ({ todo, completeTodo, editTodo, deleteTodo }) => {\n  const [tempTitle, setTempTitle] = useState('');\n  const [isTodoEditing, setisTodoEditing] = useState(false);\n\n  const handleDoubleClick = (event, title) => {\n    event.preventDefault();\n    setisTodoEditing(!isTodoEditing);\n    setTempTitle(title);\n  };\n\n  const handleEditing = ({ target }) => {\n    setTempTitle(target.value);\n  };\n\n  const handleBlur = (id) => {\n    editTodo(id, tempTitle);\n    setisTodoEditing(false);\n  };\n\n  const handleKeyDown = (event, todoId) => {\n    switch (event.key) {\n      case 'Enter':\n        handleBlur(todoId);\n        break;\n      case 'Escape':\n        setisTodoEditing(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <li\n        key={todo.id}\n        className={cn({\n          completed: todo.completed,\n          editing: isTodoEditing,\n        })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todo.completed}\n            onChange={() => (\n              completeTodo(todo.id, !todo.completed)\n            )}\n          />\n          <label onDoubleClick={(event) => {\n            handleDoubleClick(event, todo.title);\n          }}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(todo.id)}\n          />\n        </div>\n        {isTodoEditing\n            && (\n            <input\n              autoFocus\n              type=\"text\"\n              className=\"edit\"\n              value={tempTitle}\n              onChange={handleEditing}\n              onBlur={() => handleBlur(todo.id)}\n              onKeyDown={event => handleKeyDown(event, todo.id)}\n            />\n            )}\n      </li>\n    </>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n  // handleTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n};\n\nTodo.defaultProps = {\n  todo: {},\n};\n","import React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\n\nexport const TodoList = ({ todos = [], setTodos }) => {\n  const isAllTodosCompleted = useMemo(() => (\n    todos.every(todo => todo.completed === true)\n  ), [todos]);\n\n  const deleteTodo = (id) => {\n    setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\n  };\n\n  const editTodo = (id, title) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      if (title.trim().length === 0) {\n        deleteTodo(id);\n      }\n\n      return { ...todo, title };\n    }));\n  };\n\n  const completeTodo = (id, status) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return { ...todo, completed: status };\n    }));\n  };\n\n  const changeAllTodosStatus = useCallback((status) => {\n    setTodos(prevTodos => (\n      prevTodos.map(todo => ({ ...todo, completed: status }))\n    ));\n  }, [setTodos]);\n\n  return (\n    <>\n      {!!todos.length\n      && (\n      <>\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={isAllTodosCompleted}\n          onChange={() => changeAllTodosStatus(!isAllTodosCompleted)}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      </>\n      )}\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            deleteTodo={deleteTodo}\n            editTodo={editTodo}\n            completeTodo={completeTodo}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React, { useState, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { NewTodo } from './components/NewTodo';\nimport { FilterTodos } from './components/FilterTodos';\nimport { TodoList } from './components/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const location = useLocation();\n  const { pathname } = location;\n\n  const addTodo = (newTodo) => {\n    setTodos(prevTodos => [...prevTodos, newTodo]);\n  };\n\n  const filteredTodos = useMemo(() => {\n    let tempTodos = [...todos];\n\n    switch (pathname) {\n      case '/active':\n        tempTodos = todos.filter(todo => !todo.completed);\n        break;\n      case '/completed':\n        tempTodos = todos.filter(todo => todo.completed);\n        break;\n      default:\n        tempTodos = todos;\n        break;\n    }\n\n    return tempTodos;\n  }, [pathname, todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTodo addTodo={addTodo} />\n      </header>\n\n      <section className=\"main\">\n        <TodoList todos={filteredTodos} setTodos={setTodos} />\n      </section>\n\n      {!!todos.length && (\n      <footer className=\"footer\">\n        <FilterTodos todos={todos} setTodos={setTodos} />\n      </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}